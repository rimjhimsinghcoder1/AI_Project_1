# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DhcRZ6Py4HLuTzh7yTFTUvcW3KKeEY_w
"""

import pandas as pd
import random
!pip install faker


from faker import Faker

# Initialize Faker for synthetic data generation
faker = Faker()

# Generate synthetic product data
products = [f"Product {i}" for i in range(1, 21)]

# Generate synthetic user data
user_data = []
for _ in range(100):  # Simulate 100 users
    user_id = faker.uuid4()
    product_clicked = random.choice(products)
    purchase_decision = random.choice([True, False])  # Simulate purchase decision
    user_data.append({
        "user_id": user_id,
        "product_clicked": product_clicked,
        "purchased": purchase_decision
    })

# Create a DataFrame
user_interactions = pd.DataFrame(user_data)

# Display synthetic data
print(user_interactions.head())

# Count product clicks to identify the most popular products
popular_products = user_interactions['product_clicked'].value_counts().reset_index()
popular_products.columns = ['product', 'clicks']

# Recommend the top 5 most popular products
top_recommendations = popular_products.head(5)
print("Top Recommended Products Based on Clicks:")
print(top_recommendations)



def recommend_products(user_id=None):
    """
    Recommend products based on the most popular ones (rule-based for now).
    """
    recommendations = top_recommendations['product'].tolist()
    return recommendations

# Example usage
example_user_id = faker.uuid4()
print(f"Recommendations for User {example_user_id}: {recommend_products(example_user_id)}")

import pandas as pd

# Initialize an empty DataFrame to simulate a database
user_interactions = pd.DataFrame(columns=["user_id", "product_clicked", "purchased"])

def log_user_interaction(user_id, product_clicked, purchased):
    """
    Simulate logging a user's interaction.
    """
    new_interaction = pd.DataFrame([{
        "user_id": user_id,
        "product_clicked": product_clicked,
        "purchased": purchased
    }])

    # Use pd.concat instead of append
    global user_interactions
    user_interactions = pd.concat([user_interactions, new_interaction], ignore_index=True)
    print("New interaction logged:")
    print(new_interaction)

# Simulate logging a new interaction
from faker import Faker
faker = Faker()
log_user_interaction(faker.uuid4(), "Product 5", True)

print(user_interactions['product_clicked'].value_counts().head(5))

conversion_rate = user_interactions['purchased'].mean()
print(f"Purchase Conversion Rate: {conversion_rate:.2%}")

top_products = user_interactions['product_clicked'].value_counts().head(5).index.tolist()
print("Recommended Products:", top_products)

user_preferences = user_interactions.groupby('user_id')['product_clicked'].apply(list)
print("User Preferences:")
print(user_preferences)

!pip install scikit-surprise
from surprise import SVD, Dataset, Reader




from surprise.model_selection import train_test_split
from surprise import accuracy

# Prepare data for collaborative filtering
reader = Reader(rating_scale=(0, 1))
data = Dataset.load_from_df(user_interactions[['user_id', 'product_clicked', 'purchased']], reader)
trainset, testset = train_test_split(data, test_size=0.2)

# Train the model
model = SVD()
model.fit(trainset)

# Test the model
predictions = model.test(testset)
print("RMSE:", accuracy.rmse(predictions))

from flask import Flask, request, jsonify
app = Flask(__name__)

@app.route('/recommend', methods=['GET'])
def recommend():
    user_id = request.args.get('user_id')
    # Use your recommendation function here
    recommendations = recommend_products(user_id)
    return jsonify({"user_id": user_id, "recommendations": recommendations})

if __name__ == '__main__':
    app.run()